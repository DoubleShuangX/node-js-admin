var pagination = require('tiny-pagination');
module.exports=function(){
	var page=function(){
		this.options={};
		this.getPaging=function(con,sql,pageSize,pageBtnCount,currentPage,fn){
			var sql=sql;
			if(sql.match(/limit\s+\d+\s*,\s*\d+\s*/)!=null){
				sql=sql.replace(/limit\s+\d+\s*,\s*\d+\s*/,"");
			}
			var pageSize=parseInt(pageSize);
			var currentPage=parseInt(currentPage);
			con.query(sql,function(e,r){
				var count=r.length;
				var pageCount=Math.ceil(count/pageSize);
				var acPage=currentPage>pageCount?currentPage-1:currentPage;
				var pageInfo = pagination(parseInt(acPage), pageCount, parseInt(pageBtnCount));
				sql=sql+" limit "+((acPage-1)*pageSize)+","+pageSize;
				console.log("log:"+sql)
				con.query(sql,function(e,r){
					
						fn({sqlData:r,pagings:pageInfo});
					
				})
			})
		}
		this.getSiblings=function(con,dbname,column,columnValue,order,fn){
			if(order=="asc"){
				var sql1="select * from "+dbname+" WHERE "+column+"<"+parseInt(columnValue)+"  ORDER BY "+column+" DESC LIMIT 1";
				var sql2="select * from "+dbname+" WHERE "+column+">"+parseInt(columnValue)+" LIMIT 1"
				con.query(sql1+";"+sql2,function(e,r){
					fn({prev:r[0],next:r[1]});
				})
			}
			if(order=="desc"){
				var sql1="select * from "+dbname+"  where "+column+">"+columnValue+"  Limit 1";
				var sql2="select * from "+dbname+"  where "+column+"<"+columnValue+"  ORDER BY "+column+" DESC Limit 1";
				con.query(sql1+";"+sql2,function(e,r){
					fn({prev:r[0],next:r[1]});
				})
			}
		}
			
	}
	return new page();
}()