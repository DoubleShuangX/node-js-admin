module.exports=function() {
    var nav = {};
    nav.json = [];
    nav.get_hierarchy_json = function (data, id) {
		nav.json = [];
        if (!id) {
            id = 0
        }
		var parents=null;
        function hierarchy(data, ids, cenji) {
            for (var i = 0; i < data.length; i++) {
				if(id>0){
					if(data[i].id==id){
							parents=data[i];
					}
				}
                if (data[i].pid == ids) {
                    for (var ii = 0; ii <= cenji; ii++) {
                        if (ii == 0) {
                            data[i].limit =""
                        }
                        else if (ii == 1) {
                            data[i].limit = "|—"
                        } else if (ii > 1) {
                            data[i].limit += "—";
                        }
						if(id>0){
							if (ii == 0) {
								data[i].limit ="|—"
							}
							else if (ii > 0) {
								data[i].limit += "—";
							} 
						}
                    }
                    data[i].hierarchy = cenji;
					if(id>0){
						 data[i].hierarchy = cenji+1;
					}
                    nav.json.push(data[i]);
                    hierarchy(data, data[i].id, cenji + 1);
                }
            }
        }
        hierarchy(data, id, 0);
		if(parents){
				parents.limit="";
				parents.hierarchy=0;
				nav.json={current:parents,children:nav.json};
		}
        return this.json;
    }
	
	nav.get_hierarchy_child = function (data, id) {
		nav.json = [];
        if (!id) {
            id = 0
        }
        function getTree(nodes,pid) {
			var parents=null;
			var gc = function( parentid,cenji) {
				var cn = [];
				for (var i = 0; i < nodes.length; i++) {
					var n = nodes[i];
					if(n.id== pid){
						parents=n;
					}
					
					if(n.pid == parentid){
						n.children = gc(n.id,cenji+1);
						n.hierarchy=cenji;
						cn.push(n);
						if(parentid==id){
							nav.json.push(n);
						}
					};
				};
				return cn;
			};
			var d=gc(pid,1);
			if(parents){
				parents.children=d;
				nav.json=parents;
			}
			return d;
		};

        getTree(data,id);
        return this.json;
    }

    nav.get_hierarchy_ul = function (data, id,attrName,fn) {
        function treeMenu(a) {
            this.tree = a || [];
            this.groups = {};
        };
		if(attrName==undefined){
					attrName=["navName"];
		}
        treeMenu.prototype = {
            init: function (pid) {
                if (!pid) {
                    pid = 0;
                }
                this.group();
                return this.getDom(this.groups[pid]);
            },
            group: function () {
                for (var i = 0; i < this.tree.length; i++) {
                    if (this.groups[this.tree[i].pid]) {
                        this.groups[this.tree[i].pid].push(this.tree[i]);
                    } else {
                        this.groups[this.tree[i].pid] = [];
                        this.groups[this.tree[i].pid].push(this.tree[i]);
                    }
                }
            },
            getDom: function (a) {
                if (!a) {
                    return "";
                }
                var html = "<ul>";
                for (var i = 0; i < a.length; i++) {
                    html += "<li data-id='"+a[i].id+"' data-obj='"+JSON.stringify(a[i])+"'>";
					if(typeof fn==undefined){
						for (var key in attrName) {
							html +="<span class='"+attrName[key]+"'>"+ a[i][attrName[key]] +"</span>"
						}
					}else{
						html+=fn(a[i]);
					}
                    html += this.getDom(this.groups[a[i].id]);
                    html += "</li>";
                }
                ;
                html += "</ul>";
                return html;
            }
        };
        var html = new treeMenu(data).init(id);
        return html;
    }

    nav.get_hierarchy_table = function (data, id,fn) {
        if (!id) {
            id = 0
        }
        var html = "";

        function hierarchy(data, ids, cenji) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].pid == ids) {
					if(fn==undefined){
						html += '<div class="tr" data-id="' + data[i].id + '" data-pid="' + data[i].pid + '">';
						for (var key in data[i]) {
							if (key == "navName") {
								html += '<div class="td" style="text-indent:' + 20 * cenji + 'px">' + data[i][key] + '</div>'
							} else if (key != "pid") {
								html += '<div class="td">' + data[i][key] + '</div>'
							}
						}
						html += '<div class="td update" data-id="' + data[i].id + '" data-pid="' + data[i].pid + '">编辑</div>';
						html += '<div class="td remove" data-id="' + data[i].id + '" data-pid="' + data[i].pid + '">删除</div>';
						html += "</div>"
					}else{
						html += '<div class="tr" data-id="' + data[i].id + '" data-pid="' + data[i].pid + '">';
						html += fn(data[i]);
						html += "</div>"
					}
                    hierarchy(data, data[i].id, cenji + 1);
                }
            }
        }

        hierarchy(data, id, 0);
        return html;
    }
    nav.get_hierarchy_select = function (data, id,fn) {
        if (!id) {
            id = 0
        }
        var html = "";
        var str = "";

        function hierarchy(data, ids, cenji) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].pid == ids) {
                    for (var ii = 0; ii <= cenji; ii++) {
                        if (ii == 0) {
                            data[i].limit = ""
                        }
                        else if (ii == 1) {
                            data[i].limit = "|—"
                        } else if (ii > 1) {
                            data[i].limit += "—";
                        }
                    }
					if(fn==undefined){
						html += '<option class="item"  data-id="' + data[i].id + '" data-pid="' + data[i].pid + '" data-Name="' + data[i].navName + '" value="' + data[i].id + '">' + data[i].limit + data[i].navName + '</option>';
                    }else{
						html +=fn(data[i]);
					}
					hierarchy(data, data[i].id, cenji + 1);
                }
            }
        }

        hierarchy(data, id, 0);
        return html;
    }
    nav.get_insertAll_id = function (Da, id) {
        var IDs = [];
        IDs.push(id);
        function hierarchy(data, ids) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].pid == ids) {
                    IDs.push(data[i].id)
                    hierarchy(data, data[i].id);
                }
            }
        }

        hierarchy(Da, id);
        return IDs.join(",");
    }
    nav.get_parent = function (Da, pid) {
        var IDs = [];

        function hierarchy(data, pids) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].id == pids) {
                    IDs.push(data[i])
                    hierarchy(data, data[i].pid);
                }
            }
        }

        hierarchy(Da, pid);
        return IDs;
    }
    return nav;
}